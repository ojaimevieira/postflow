{
  "name": "🎬 PostFlow BETA - Videos (File Upload)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 30
            }
          ]
        }
      },
      "id": "348b7043-ab5a-457f-aa99-35a2b12e4fe5",
      "name": "Schedule Trigger (Every 30s)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -736,
        176
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/databases/1c868fa9-6b04-811a-b439-da9ae42cf538/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "{\n  \"filter\": {\n    \"and\": [\n      {\n        \"property\": \"Status\",\n        \"select\": {\n          \"equals\": \"Agendado\"\n        }\n      },\n      {\n        \"property\": \"Publicar?\",\n        \"checkbox\": {\n          \"equals\": true\n        }\n      },\n      {\n        \"property\": \"Plataforma\",\n        \"multi_select\": {\n          \"contains\": \"Instagram\"\n        }\n      }\n    ]\n  },\n  \"page_size\": 10\n}",
        "options": {}
      },
      "id": "1b5f0e90-b20a-4423-aa99-3c089d835081",
      "name": "Query Notion Posts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -528,
        176
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "JE15MmhvIQKtOxT3",
          "name": "Header Auth account"
        },
        "httpBearerAuth": {
          "id": "4823Bw3Thr44sjtn",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// PostFlow BETA - Process Instagram posts with PHOTOS + VIDEOS support (File Upload)\nconst items = $input.all();\nconst readyPosts = [];\n\nconsole.log(`🎬 BETA FILE UPLOAD - Processing ${items.length} items (Photos + Videos support)`);\n\n// Get current date/time for comparison\nconst now = new Date();\nconsole.log(`🕒 Current time: ${now.toISOString()}`);\nconsole.log(`🌍 Current time (Local): ${now.toLocaleString('pt-BR')}`);\n\n// Helper function to detect media type from file extension\nfunction getMediaType(mediaUrl) {\n  const url = mediaUrl.toLowerCase();\n  const videoExtensions = ['.mp4', '.mov', '.avi', '.mkv', '.webm', '.m4v'];\n  const imageExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];\n  \n  for (const ext of videoExtensions) {\n    if (url.includes(ext)) return 'VIDEO';\n  }\n  \n  for (const ext of imageExtensions) {\n    if (url.includes(ext)) return 'IMAGE';\n  }\n  \n  // If no clear extension, assume image (default Instagram behavior)\n  return 'IMAGE';\n}\n\n// Helper function to convert Google Drive URLs for download\nfunction convertGoogleDriveUrl(url) {\n  const driveMatch = url.match(/\\/file\\/d\\/([a-zA-Z0-9_-]+)/);\n  if (driveMatch) {\n    console.log(`🔄 Converting Google Drive URL to direct download`);\n    return `https://drive.google.com/uc?export=download&id=${driveMatch[1]}`;\n  }\n  return url; // Return original if not Google Drive\n}\n\n// Helper function to check if URL needs downloading\nfunction needsDownload(url) {\n  // Google Drive URLs always need downloading\n  if (url.includes('drive.google.com')) return true;\n  \n  // Notion temporary URLs need to be downloaded  \n  if (url.includes('prod-files-secure.s3.us-west-2.amazonaws.com')) return true;\n  \n  // Other cloud storage that might need downloading\n  if (url.includes('dropbox.com') || url.includes('onedrive.com')) return true;\n  \n  // Direct media URLs can potentially be used directly (but may still fail)\n  return false;\n}\n\nfor (const item of items) {\n  const responseData = item.json;\n  \n  // Get results from Notion API response\n  const notionPages = responseData.results || [];\n  console.log(`📄 Found ${notionPages.length} pages in Notion response`);\n  \n  if (notionPages.length === 0) {\n    console.log('📭 No scheduled posts found. Workflow will finish gracefully.');\n    return [];\n  }\n  \n  for (const data of notionPages) {\n    console.log('\\n=== 📋 Processing page ===');\n    \n    // Extract post title first for better logging\n    const postTitle = data.properties.Nome?.title?.[0]?.text?.content || 'Untitled Post';\n    console.log(`📝 Post: \"${postTitle}\"`);\n    console.log(`🆔 Page ID: ${data.id}`);\n    \n    // Triple check all conditions\n    const status = data.properties.Status?.select?.name;\n    console.log(`📊 Status: ${status}`);\n    if (status !== 'Agendado') {\n      console.log(`❌ SKIP: Status is \"${status}\", not \"Agendado\"`);\n      continue;\n    }\n    \n    const shouldPublish = data.properties['Publicar?']?.checkbox;\n    console.log(`✅ Publicar?: ${shouldPublish}`);\n    if (!shouldPublish) {\n      console.log('❌ SKIP: Publicar? is false');\n      continue;\n    }\n    \n    const platforms = data.properties.Plataforma?.multi_select || [];\n    const platformNames = platforms.map(p => p.name);\n    console.log(`🎯 Platforms: [${platformNames.join(', ')}]`);\n    const hasInstagram = platforms.some(p => p.name === 'Instagram');\n    \n    if (!hasInstagram) {\n      console.log('❌ SKIP: No Instagram platform');\n      continue;\n    }\n    \n    // Check scheduled date/time\n    const scheduledDateData = data.properties['Data do Agendamento']?.date;\n    console.log(`📅 Scheduled date data:`, scheduledDateData);\n    \n    if (!scheduledDateData) {\n      console.log('❌ SKIP: No scheduled date set');\n      continue;\n    }\n    \n    // Parse scheduled date (can be date-only or datetime)\n    const scheduledStart = scheduledDateData.start;\n    let scheduledDate;\n    \n    if (scheduledStart.includes('T')) {\n      // Has time component\n      scheduledDate = new Date(scheduledStart);\n    } else {\n      // Date only - assume 9:00 AM local time\n      scheduledDate = new Date(scheduledStart + 'T09:00:00');\n    }\n    \n    console.log(`📅 Scheduled for: ${scheduledDate.toISOString()}`);\n    console.log(`📅 Scheduled for (Local): ${scheduledDate.toLocaleString('pt-BR')}`);\n    \n    // Check if it's time to publish\n    const isTimeToPublish = now >= scheduledDate;\n    console.log(`⏰ Time check: ${isTimeToPublish ? '✅ READY' : '❌ NOT YET'}`);\n    \n    if (!isTimeToPublish) {\n      const timeUntil = scheduledDate - now;\n      const hoursUntil = Math.round(timeUntil / (1000 * 60 * 60) * 10) / 10;\n      console.log(`⏳ SKIP: Still ${hoursUntil} hours until scheduled time`);\n      continue;\n    }\n    \n    // Extract post data\n    const postText = data.properties['Texto do Post']?.rich_text?.[0]?.text?.content || '';\n    const hashtags = data.properties.Hashtags?.multi_select?.map(tag => tag.name.startsWith('#') ? tag.name : `#${tag.name}`).join(' ') || '';\n    const media = data.properties.Mídia?.files?.[0];\n    \n    console.log(`📸 Media available: ${!!media}`);\n    \n    if (!media) {\n      console.log(`❌ SKIP: Post \"${postTitle}\" has no media`);\n      continue;\n    }\n    \n    let mediaUrl = media.external?.url || media.file?.url;\n    console.log(`🔗 Original Media URL: ${mediaUrl}`);\n    \n    // Convert Google Drive URLs for download\n    const downloadUrl = convertGoogleDriveUrl(mediaUrl);\n    console.log(`🔗 Download URL: ${downloadUrl}`);\n    \n    // Detect media type (photo vs video)\n    const mediaType = getMediaType(downloadUrl);\n    console.log(`🎬 Media Type: ${mediaType}`);\n    \n    // Check if we need to download the file\n    const requiresDownload = needsDownload(downloadUrl);\n    console.log(`💾 Requires Download: ${requiresDownload}`);\n    \n    // Build caption\n    const caption = postText + (hashtags ? '\\n\\n' + hashtags : '');\n    \n    console.log(`🚀 POST APPROVED: \"${postTitle}\" ready for Instagram ${mediaType} posting!`);\n    console.log(`🕒 Publishing at scheduled time: ${scheduledDate.toLocaleString('pt-BR')}`);\n    \n    readyPosts.push({\n      notion_page_id: data.id,\n      post_title: postTitle,\n      caption: caption,\n      media_url: mediaUrl,\n      download_url: downloadUrl,\n      media_type: mediaType,\n      requires_download: requiresDownload,\n      scheduled_date: scheduledDate.toISOString(),\n      // Dados extras para preservar através do fluxo\n      _preserve_notion_id: data.id,\n      _preserve_title: postTitle\n    });\n  }\n}\n\nconsole.log(`\\n🎯 === BETA FILE UPLOAD EXECUTION RESULT ===`);\nconsole.log(`📊 Total posts ready for Instagram: ${readyPosts.length}`);\nif (readyPosts.length > 0) {\n  console.log('🚀 Posts that will be published NOW (BETA):');\n  readyPosts.forEach((post, i) => {\n    console.log(`   ${i+1}. \"${post.post_title}\" [${post.media_type}] (download: ${post.requires_download}) (scheduled: ${new Date(post.scheduled_date).toLocaleString('pt-BR')})`);\n  });\n} else {\n  console.log('⏳ No posts ready to publish at this time. Next check in 30 seconds.');\n}\n\nreturn readyPosts.map(post => ({ json: post }));"
      },
      "id": "75cc88f6-78a5-44c6-8608-aa0117827bee",
      "name": "Process Instagram Posts (BETA)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        176
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.requires_download }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-requires-download",
      "name": "IF: Requires Download?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -80,
        176
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.download_url }}",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 5
            }
          },
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "download-media-node",
      "name": "Download Media File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        144,
        76
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/17841468923069540/media",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer YOUR_FACEBOOK_ACCESS_TOKEN_HERE"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "multipartBody": {
          "parameters": [
            {
              "name": "={{ $json.media_type === 'VIDEO' ? 'video' : 'image' }}",
              "inputDataFieldName": "data"
            },
            {
              "name": "caption",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "media_type",
              "value": "={{ $json.media_type === 'VIDEO' ? 'VIDEO' : 'IMAGE' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "upload-media-node",
      "name": "Upload Media to Instagram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        368,
        76
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/17841468923069540/media",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "={{ $json.media_type === 'VIDEO' ? 'video_url' : 'image_url' }}",
              "value": "={{ $json.media_url }}"
            },
            {
              "name": "caption",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "media_type",
              "value": "={{ $json.media_type === 'VIDEO' ? 'VIDEO' : 'IMAGE' }}"
            },
            {
              "name": "access_token",
              "value": "YOUR_FACEBOOK_ACCESS_TOKEN_HERE"
            }
          ]
        },
        "options": {}
      },
      "id": "url-media-node",
      "name": "Use Media URL Directly",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        368,
        276
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/17841468923069540/media_publish",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "creation_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "access_token",
              "value": "YOUR_FACEBOOK_ACCESS_TOKEN_HERE"
            }
          ]
        },
        "options": {}
      },
      "id": "eb537ab0-efe7-41d2-b23d-385df6281d44",
      "name": "Publish Instagram Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        592,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Recuperar notion_page_id dos dados originais\nconst currentData = $json;\nconst originalData = $('Process Instagram Posts (BETA)').item.json;\n\nconsole.log('🔄 Recuperando notion_page_id...');\nconsole.log('Dados atuais (Instagram):', JSON.stringify(currentData, null, 2));\nconsole.log('Dados originais (Notion):', JSON.stringify(originalData, null, 2));\n\n// Preservar notion_page_id dos dados originais\nconst finalData = {\n  ...currentData,\n  notion_page_id: originalData.notion_page_id,\n  post_title: originalData.post_title,\n  media_type: originalData.media_type,\n  instagram_published: true,\n  automated_publish: true,\n  published_at: new Date().toISOString()\n};\n\nconsole.log('✅ Dados finais para Notion:', JSON.stringify(finalData, null, 2));\n\nreturn { json: finalData };"
      },
      "id": "feb8600c-928e-4e7e-ba00-07204e43d33c",
      "name": "Preserve Notion ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        176
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.notion_page_id }}",
          "mode": "id",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Status|select",
              "selectValue": "Publicado"
            },
            {
              "key": "Publicar?|checkbox"
            }
          ]
        },
        "options": {}
      },
      "id": "37ae95bc-fb78-4a64-83ae-5a559f458ddc",
      "name": "Update Notion Status",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        1040,
        176
      ],
      "credentials": {
        "notionApi": {
          "id": "AtDeqGpF6le4FZQI",
          "name": "Notion account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Query Notion Posts": {
      "main": [
        [
          {
            "node": "Process Instagram Posts (BETA)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Instagram Posts (BETA)": {
      "main": [
        [
          {
            "node": "IF: Requires Download?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Requires Download?": {
      "main": [
        [
          {
            "node": "Download Media File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Use Media URL Directly",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Media File": {
      "main": [
        [
          {
            "node": "Upload Media to Instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Media to Instagram": {
      "main": [
        [
          {
            "node": "Publish Instagram Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use Media URL Directly": {
      "main": [
        [
          {
            "node": "Publish Instagram Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish Instagram Post": {
      "main": [
        [
          {
            "node": "Preserve Notion ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preserve Notion ID": {
      "main": [
        [
          {
            "node": "Update Notion Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger (Every 30s)": {
      "main": [
        [
          {
            "node": "Query Notion Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "beta-videos-upload-1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bd879ef2240eb347546312a99952d46fe3a5a7d97275840626ec2c0edb734025"
  },
  "id": "postflow-beta-videos-upload",
  "tags": []
}
