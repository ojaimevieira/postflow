{
  "name": "PostFlow Instagram - v13 DEBUG",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger-debug",
      "name": "Manual Trigger (DEBUG)",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/databases/1c868fa9-6b04-811a-b439-da9ae42cf538/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            },
            {
              "name": "Content-Type", 
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "{\n  \"filter\": {\n    \"and\": [\n      {\n        \"property\": \"Status\",\n        \"select\": {\n          \"equals\": \"Agendado\"\n        }\n      },\n      {\n        \"property\": \"Publicar?\",\n        \"checkbox\": {\n          \"equals\": true\n        }\n      },\n      {\n        \"property\": \"Plataforma\",\n        \"multi_select\": {\n          \"contains\": \"Instagram\"\n        }\n      }\n    ]\n  },\n  \"page_size\": 10\n}",
        "options": {}
      },
      "id": "notion-query-debug",
      "name": "Query Notion Posts (DEBUG)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "notion_http_auth",
          "name": "Notion HTTP Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// PostFlow v13 DEBUG - Detailed analysis of what's happening\nconst items = $input.all();\n\nconsole.log('üîç ===== POSTFLOW v13 DEBUG MODE =====');\nconsole.log(`üì• Input items received: ${items.length}`);\n\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  console.log(`\\nüì¶ Item ${i + 1}:`);\n  console.log('Raw item data:', JSON.stringify(item, null, 2));\n  \n  const responseData = item.json;\n  console.log('Response data type:', typeof responseData);\n  console.log('Response data keys:', Object.keys(responseData || {}));\n  \n  if (responseData && responseData.results) {\n    const notionPages = responseData.results;\n    console.log(`\\nüìÑ Found ${notionPages.length} pages in Notion API response`);\n    \n    if (notionPages.length === 0) {\n      console.log('‚ùå REASON: No pages returned from Notion query');\n      console.log('This means either:');\n      console.log('  1. No posts have Status = \"Agendado\"');\n      console.log('  2. No posts have Publicar? = true');\n      console.log('  3. No posts have Plataforma containing \"Instagram\"');\n      console.log('\\nüîç Let me check what we actually got from Notion...');\n      console.log('Full Notion response:', JSON.stringify(responseData, null, 2));\n    } else {\n      // Analyze each page\n      for (let j = 0; j < notionPages.length; j++) {\n        const page = notionPages[j];\n        console.log(`\\n=== üìã PAGE ${j + 1} ANALYSIS ===`);\n        \n        // Page ID\n        console.log(`üÜî Page ID: ${page.id}`);\n        \n        // Post title\n        const title = page.properties?.Nome?.title?.[0]?.text?.content;\n        console.log(`üìù Title: \"${title || 'NO TITLE'}\"`);\n        \n        // All properties\n        console.log('\\nüîç ALL PROPERTIES:');\n        const props = page.properties || {};\n        Object.keys(props).forEach(key => {\n          const prop = props[key];\n          console.log(`  ${key}: ${JSON.stringify(prop, null, 4)}`);\n        });\n        \n        // Status check\n        const status = page.properties?.Status?.select?.name;\n        console.log(`\\nüìä Status: \"${status}\" (expected: \"Agendado\")`);\n        \n        // Publicar check\n        const publicar = page.properties?.['Publicar?']?.checkbox;\n        console.log(`‚úÖ Publicar?: ${publicar} (expected: true)`);\n        \n        // Platform check  \n        const platforms = page.properties?.Plataforma?.multi_select || [];\n        console.log(`üéØ Platforms:`, platforms.map(p => p.name));\n        const hasInstagram = platforms.some(p => p.name === 'Instagram');\n        console.log(`üéØ Has Instagram?: ${hasInstagram}`);\n        \n        // Date check\n        const dateData = page.properties?.['Data do Agendamento']?.date;\n        console.log(`üìÖ Date data:`, dateData);\n        \n        if (dateData) {\n          const scheduledStart = dateData.start;\n          let scheduledDate;\n          \n          if (scheduledStart.includes('T')) {\n            scheduledDate = new Date(scheduledStart);\n          } else {\n            scheduledDate = new Date(scheduledStart + 'T09:00:00');\n          }\n          \n          const now = new Date();\n          console.log(`üìÖ Scheduled: ${scheduledDate.toISOString()}`);\n          console.log(`üìÖ Scheduled (Local): ${scheduledDate.toLocaleString('pt-BR')}`);\n          console.log(`üïí Current: ${now.toISOString()}`);\n          console.log(`üïí Current (Local): ${now.toLocaleString('pt-BR')}`);\n          console.log(`‚è∞ Is time to publish?: ${now >= scheduledDate}`);\n          \n          if (now < scheduledDate) {\n            const diff = scheduledDate - now;\n            const hours = Math.floor(diff / (1000 * 60 * 60));\n            const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n            console.log(`‚è≥ Time until publish: ${hours}h ${minutes}m`);\n          }\n        }\n        \n        // Media check\n        const media = page.properties?.M√≠dia?.files?.[0];\n        console.log(`üì∏ Has media?: ${!!media}`);\n        if (media) {\n          console.log(`üì∏ Media URL: ${media.external?.url || media.file?.url}`);\n        }\n        \n        // Final verdict\n        console.log('\\nüéØ FINAL ANALYSIS:');\n        const reasons = [];\n        if (status !== 'Agendado') reasons.push(`Status is \"${status}\", not \"Agendado\"`);\n        if (!publicar) reasons.push('Publicar? is false');\n        if (!hasInstagram) reasons.push('No Instagram platform');\n        if (!dateData) reasons.push('No scheduled date');\n        if (dateData && now < scheduledDate) reasons.push('Not time yet');\n        if (!media) reasons.push('No media attached');\n        \n        if (reasons.length === 0) {\n          console.log('‚úÖ THIS POST SHOULD BE PUBLISHED!');\n        } else {\n          console.log(`‚ùå POST SKIPPED - Reasons: ${reasons.join(', ')}`);\n        }\n      }\n    }\n  } else {\n    console.log('‚ùå ERROR: No results array in response data');\n    console.log('Full response:', JSON.stringify(responseData, null, 2));\n  }\n}\n\nconsole.log('\\nüîç ===== END DEBUG ANALYSIS =====');\nreturn [{ json: { debug_complete: true, analysis_done: new Date().toISOString() } }];"
      },
      "id": "debug-analysis",
      "name": "DEBUG Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    }
  ],
  "connections": {
    "Manual Trigger (DEBUG)": {
      "main": [
        [
          {
            "node": "Query Notion Posts (DEBUG)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Notion Posts (DEBUG)": {
      "main": [
        [
          {
            "node": "DEBUG Analysis",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "13.0.0-debug",
  "id": "postflow-instagram-v13-debug",
  "meta": {
    "instanceId": "postflow-instagram-v13-debug"
  }
}
