{
  "name": "🛡️ PostFlow BETA - Stable Videos (Optimized for Server)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 2
            }
          ]
        }
      },
      "id": "348b7043-ab5a-457f-aa99-35a2b12e4fe5",
      "name": "Schedule Trigger (Every 2 min)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -736,
        176
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/databases/1c868fa9-6b04-811a-b439-da9ae42cf538/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "{\n  \"filter\": {\n    \"and\": [\n      {\n        \"property\": \"Status\",\n        \"select\": {\n          \"equals\": \"Agendado\"\n        }\n      },\n      {\n        \"property\": \"Publicar?\",\n        \"checkbox\": {\n          \"equals\": true\n        }\n      },\n      {\n        \"property\": \"Plataforma\",\n        \"multi_select\": {\n          \"contains\": \"Instagram\"\n        }\n      }\n    ]\n  },\n  \"page_size\": 3\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "1b5f0e90-b20a-4423-aa99-3c089d835081",
      "name": "Query Notion Posts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -528,
        176
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "JE15MmhvIQKtOxT3",
          "name": "Header Auth account"
        },
        "httpBearerAuth": {
          "id": "4823Bw3Thr44sjtn",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// PostFlow BETA - Stable Processing (Server Optimized)\nconst items = $input.all();\nconst readyPosts = [];\n\nconsole.log(`🛡️ STABLE EXECUTION - Processing ${items.length} items (Server optimized)`);\n\n// Get current date/time for comparison\nconst now = new Date();\nconsole.log(`🕒 Current time: ${now.toISOString()}`);\nconsole.log(`🌍 Current time (Local): ${now.toLocaleString('pt-BR')}`);\n\n// Helper function to detect media type\nfunction getMediaType(mediaUrl) {\n  const url = mediaUrl.toLowerCase();\n  const videoExtensions = ['.mp4', '.mov', '.avi', '.mkv', '.webm', '.m4v'];\n  const imageExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];\n  \n  for (const ext of videoExtensions) {\n    if (url.includes(ext)) return 'VIDEO';\n  }\n  \n  for (const ext of imageExtensions) {\n    if (url.includes(ext)) return 'IMAGE';\n  }\n  \n  return 'IMAGE';\n}\n\n// Stable URL handling - always download for reliability\nfunction prepareStableUrl(originalUrl) {\n  const url = originalUrl.toLowerCase();\n  \n  // Google Drive URLs - convert to direct download\n  if (url.includes('drive.google.com')) {\n    const driveMatch = originalUrl.match(/\\/file\\/d\\/([a-zA-Z0-9_-]+)/);\n    if (driveMatch) {\n      console.log(`🔄 Converting Google Drive URL for download`);\n      return {\n        downloadUrl: `https://drive.google.com/uc?export=download&id=${driveMatch[1]}`,\n        source: 'GOOGLE_DRIVE',\n        requiresDownload: true\n      };\n    }\n  }\n  \n  // All other URLs - download for consistency\n  return {\n    downloadUrl: originalUrl,\n    source: 'DIRECT',\n    requiresDownload: true\n  };\n}\n\nfor (const item of items) {\n  const responseData = item.json;\n  const notionPages = responseData.results || [];\n  \n  console.log(`📄 Found ${notionPages.length} pages in Notion response`);\n  \n  if (notionPages.length === 0) {\n    console.log('📭 No scheduled posts found. Workflow will finish gracefully.');\n    return [];\n  }\n  \n  // Limit to 1 post per execution to prevent server overload\n  const limitedPages = notionPages.slice(0, 1);\n  if (notionPages.length > 1) {\n    console.log(`⚠️ SERVER PROTECTION: Processing only 1 post (found ${notionPages.length}) to prevent overload`);\n  }\n  \n  for (const data of limitedPages) {\n    console.log('\\n=== 🛡️ Processing page (STABLE) ===');\n    \n    const postTitle = data.properties.Nome?.title?.[0]?.text?.content || 'Untitled Post';\n    console.log(`📝 Post: \"${postTitle}\"`);\n    console.log(`🆔 Page ID: ${data.id}`);\n    \n    // Check all conditions\n    const status = data.properties.Status?.select?.name;\n    if (status !== 'Agendado') {\n      console.log(`❌ SKIP: Status is \"${status}\", not \"Agendado\"`);\n      continue;\n    }\n    \n    const shouldPublish = data.properties['Publicar?']?.checkbox;\n    if (!shouldPublish) {\n      console.log('❌ SKIP: Publicar? is false');\n      continue;\n    }\n    \n    const platforms = data.properties.Plataforma?.multi_select || [];\n    const hasInstagram = platforms.some(p => p.name === 'Instagram');\n    if (!hasInstagram) {\n      console.log('❌ SKIP: No Instagram platform');\n      continue;\n    }\n    \n    // Check scheduled date/time\n    const scheduledDateData = data.properties['Data do Agendamento']?.date;\n    if (!scheduledDateData) {\n      console.log('❌ SKIP: No scheduled date set');\n      continue;\n    }\n    \n    const scheduledStart = scheduledDateData.start;\n    let scheduledDate;\n    \n    if (scheduledStart.includes('T')) {\n      scheduledDate = new Date(scheduledStart);\n    } else {\n      scheduledDate = new Date(scheduledStart + 'T09:00:00');\n    }\n    \n    const isTimeToPublish = now >= scheduledDate;\n    console.log(`⏰ Time check: ${isTimeToPublish ? '✅ READY' : '❌ NOT YET'}`);\n    \n    if (!isTimeToPublish) {\n      const timeUntil = scheduledDate - now;\n      const hoursUntil = Math.round(timeUntil / (1000 * 60 * 60) * 10) / 10;\n      console.log(`⏳ SKIP: Still ${hoursUntil} hours until scheduled time`);\n      continue;\n    }\n    \n    // Extract post data\n    const postText = data.properties['Texto do Post']?.rich_text?.[0]?.text?.content || '';\n    const hashtags = data.properties.Hashtags?.multi_select?.map(tag => tag.name.startsWith('#') ? tag.name : `#${tag.name}`).join(' ') || '';\n    const media = data.properties.Mídia?.files?.[0];\n    \n    if (!media) {\n      console.log(`❌ SKIP: Post \"${postTitle}\" has no media`);\n      continue;\n    }\n    \n    const originalUrl = media.external?.url || media.file?.url;\n    console.log(`🔗 Original Media URL: ${originalUrl}`);\n    \n    // Stable URL processing - always download\n    const urlInfo = prepareStableUrl(originalUrl);\n    console.log(`🔗 Download URL: ${urlInfo.downloadUrl}`);\n    console.log(`🎯 Source: ${urlInfo.source}`);\n    \n    const mediaType = getMediaType(urlInfo.downloadUrl);\n    console.log(`🎬 Media Type: ${mediaType}`);\n    \n    const caption = postText + (hashtags ? '\\n\\n' + hashtags : '');\n    \n    console.log(`🛡️ POST APPROVED: \"${postTitle}\" ready for stable Instagram ${mediaType} posting!`);\n    \n    readyPosts.push({\n      notion_page_id: data.id,\n      post_title: postTitle,\n      caption: caption,\n      download_url: urlInfo.downloadUrl,\n      original_url: originalUrl,\n      media_type: mediaType,\n      source_type: urlInfo.source,\n      scheduled_date: scheduledDate.toISOString(),\n      _preserve_notion_id: data.id,\n      _preserve_title: postTitle\n    });\n    \n    // Break after first post to prevent server overload\n    break;\n  }\n}\n\nconsole.log(`\\n🛡️ === STABLE EXECUTION RESULT ===`);\nconsole.log(`📊 Posts processed this run: ${readyPosts.length}`);\nif (readyPosts.length > 0) {\n  console.log('🚀 Post that will be published NOW (STABLE):');\n  readyPosts.forEach((post, i) => {\n    console.log(`   ${i+1}. \"${post.post_title}\" [${post.media_type}] (${post.source_type}) (scheduled: ${new Date(post.scheduled_date).toLocaleString('pt-BR')})`);\n  });\n} else {\n  console.log('⏳ No posts ready to publish at this time. Next check in 2 minutes.');\n}\n\nreturn readyPosts.map(post => ({ json: post }));"
      },
      "id": "75cc88f6-78a5-44c6-8608-aa0117827bee",
      "name": "Stable Process Posts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        176
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.download_url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 120000,
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 5
            }
          }
        }
      },
      "id": "download-media-stable",
      "name": "Download Media File (Stable)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -80,
        176
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/17841468923069540/media",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "caption",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "media_type",
              "value": "={{ $json.media_type === 'VIDEO' ? 'VIDEO' : 'IMAGE' }}"
            },
            {
              "name": "access_token",
              "value": "YOUR_FACEBOOK_ACCESS_TOKEN_HERE"
            }
          ]
        },
        "sendBinaryData": true,
        "binaryPropertyName": "data",
        "options": {
          "timeout": 180000
        }
      },
      "id": "upload-media-stable",
      "name": "Upload to Instagram (Stable)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        144,
        176
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/17841468923069540/media_publish",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "creation_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "access_token",
              "value": "YOUR_FACEBOOK_ACCESS_TOKEN_HERE"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "eb537ab0-efe7-41d2-b23d-385df6281d44",
      "name": "Publish Instagram Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        368,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Recuperar notion_page_id dos dados originais\nconst currentData = $json;\nconst originalData = $('Stable Process Posts').item.json;\n\nconsole.log('🔄 Recuperando notion_page_id...');\nconsole.log('Source type used:', originalData.source_type);\n\nconst finalData = {\n  ...currentData,\n  notion_page_id: originalData.notion_page_id,\n  post_title: originalData.post_title,\n  media_type: originalData.media_type,\n  source_type: originalData.source_type,\n  instagram_published: true,\n  automated_publish: true,\n  stable_version: true,\n  published_at: new Date().toISOString()\n};\n\nconsole.log('✅ Dados finais para Notion (STABLE):', JSON.stringify(finalData, null, 2));\n\nreturn { json: finalData };"
      },
      "id": "feb8600c-928e-4e7e-ba00-07204e43d83c",
      "name": "Preserve Notion ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        176
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.notion_page_id }}",
          "mode": "id",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Status|select",
              "selectValue": "Publicado"
            },
            {
              "key": "Publicar?|checkbox"
            }
          ]
        },
        "options": {}
      },
      "id": "37ae95bc-fb78-4a64-83ae-5a559f458ddc",
      "name": "Update Notion Status",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        800,
        176
      ],
      "credentials": {
        "notionApi": {
          "id": "AtDeqGpF6le4FZQI",
          "name": "Notion account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Query Notion Posts": {
      "main": [
        [
          {
            "node": "Stable Process Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stable Process Posts": {
      "main": [
        [
          {
            "node": "Download Media File (Stable)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Media File (Stable)": {
      "main": [
        [
          {
            "node": "Upload to Instagram (Stable)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Instagram (Stable)": {
      "main": [
        [
          {
            "node": "Publish Instagram Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish Instagram Post": {
      "main": [
        [
          {
            "node": "Preserve Notion ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preserve Notion ID": {
      "main": [
        [
          {
            "node": "Update Notion Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger (Every 2 min)": {
      "main": [
        [
          {
            "node": "Query Notion Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "stable-videos-1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "stable-videos-server-optimized"
  },
  "id": "postflow-stable-videos",
  "tags": []
}
