{
  "name": "‚ö° PostFlow - Test Notion URL Access",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "triggerAtSecond": 30
            }
          ]
        }
      },
      "id": "schedule-test",
      "name": "Schedule Test (Every 30s)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -600,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": "1cc68fa96b0480a5ad81f57648a2392c",
        "options": {
          "downloadFiles": true
        },
        "filterRequest": "json",
        "filters": {
          "and": [
            {
              "property": "Status",
              "select": {
                "equals": "Agendado"
              }
            },
            {
              "property": "Publicar?",
              "checkbox": {
                "equals": true
              }
            },
            {
              "property": "Data do Agendamento",
              "date": {
                "on_or_before": "{{ new Date().toISOString().split('T')[0] }}"
              }
            }
          ]
        },
        "sortRequest": "json",
        "sorts": [
          {
            "property": "Data do Agendamento",
            "direction": "ascending"
          }
        ],
        "limit": 5
      },
      "id": "query-notion-test",
      "name": "Query Notion (Test)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        -400,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// FILTERED test to extract file URLs from Notion\nconst items = $input.all();\nconst testData = [];\n\nconsole.log(`üß™ FILTERED TESTING - Processing ${items.length} items for URL access`);\nconsole.log(`üìÖ Filter: Status=Agendado, Publicar?=true, Data <= hoje`);\nconsole.log(`üìä Limit: 5 results, sorted by Data do Agendamento`);\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const postTitle = data.properties?.Nome?.title?.[0]?.text?.content || 'Untitled Post';\n  const status = data.properties?.Status?.select?.name;\n  const shouldPublish = data.properties?.['Publicar?']?.checkbox;\n  const scheduledDate = data.properties?.['Data do Agendamento']?.date?.start;\n  const mediaFiles = data.properties?.M√≠dia?.files || [];\n  \n  console.log(`\\nüìù Testing post: \"${postTitle}\"`);\n  console.log(`üìä Status: ${status}`);\n  console.log(`‚úÖ Publicar?: ${shouldPublish}`);\n  console.log(`ÔøΩ Agendado para: ${scheduledDate}`);\n  console.log(`ÔøΩüì∏ Media files: ${mediaFiles.length}`);\n  \n  if (mediaFiles.length > 0) {\n    const mediaFile = mediaFiles[0];\n    console.log(`üìÅ Media file data:`, JSON.stringify(mediaFile, null, 2));\n    \n    let fileUrl = null;\n    let fileName = null;\n    let fileType = null;\n    \n    if (mediaFile.file) {\n      fileUrl = mediaFile.file.url;\n      fileName = mediaFile.name || 'notion_file';\n      fileType = 'notion';\n      console.log(`üì§ Found Notion file: ${fileName}`);\n      console.log(`üîó URL: ${fileUrl}`);\n    } else if (mediaFile.external) {\n      fileUrl = mediaFile.external.url;\n      fileName = mediaFile.name || 'external_file';\n      fileType = 'external';\n      console.log(`üîó Found external file: ${fileName}`);\n      console.log(`üîó URL: ${fileUrl}`);\n    }\n    \n    if (fileUrl) {\n      testData.push({\n        post_title: postTitle,\n        status: status,\n        should_publish: shouldPublish,\n        scheduled_date: scheduledDate,\n        file_url: fileUrl,\n        file_name: fileName,\n        file_type: fileType,\n        page_id: data.id\n      });\n    }\n  } else {\n    console.log(`‚ùå No media files found for \"${postTitle}\"`);\n  }\n}\n\nconsole.log(`\\nüß™ === FILTERED TEST SUMMARY ===`);\nconsole.log(`üìä Total pages returned by filter: ${items.length}`);\nconsole.log(`üìÅ Total files to test: ${testData.length}`);\nif (testData.length > 0) {\n  console.log('üìù Filtered posts:');\n  testData.forEach((post, i) => {\n    console.log(`   ${i+1}. \"${post.post_title}\" [${post.status}] (${post.scheduled_date})`);\n  });\n} else {\n  console.log('‚è≥ No posts match the current filter criteria.');\n}\n\nreturn testData.map(test => ({ json: test }));"
      },
      "id": "extract-test-urls",
      "name": "Extract Test URLs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -200,
        200
      ]
    },
    {
      "parameters": {
        "method": "HEAD",
        "url": "={{ $json.file_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 10
            }
          }
        }
      },
      "id": "test-url-access",
      "name": "Test URL Access (HEAD)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        0,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Analyze the HEAD request results\nconst items = $input.all();\n\nconsole.log(`\\nüîç === URL ACCESS TEST RESULTS ===`);\n\nfor (const item of items) {\n  const data = item.json;\n  \n  console.log(`\\nüìã Test for: \"${data.post_title}\"`);\n  console.log(`üìÅ File: ${data.file_name} (${data.file_type})`);\n  console.log(`üîó URL: ${data.file_url}`);\n  \n  // Check response status\n  if (data.statusCode) {\n    console.log(`üìä Status Code: ${data.statusCode}`);\n    \n    if (data.statusCode === 200) {\n      console.log(`‚úÖ SUCCESS: URL is accessible!`);\n      \n      // Check headers for file info\n      if (data.headers) {\n        const contentType = data.headers['content-type'] || 'unknown';\n        const contentLength = data.headers['content-length'] || 'unknown';\n        console.log(`üìÑ Content-Type: ${contentType}`);\n        console.log(`üìè Content-Length: ${contentLength} bytes`);\n      }\n    } else if (data.statusCode === 403) {\n      console.log(`‚ùå FORBIDDEN: URL access denied (403)`);\n    } else if (data.statusCode === 404) {\n      console.log(`‚ùå NOT FOUND: URL not found (404)`);\n    } else {\n      console.log(`‚ö†Ô∏è  WARNING: Unexpected status code`);\n    }\n  } else {\n    console.log(`‚ùå ERROR: No response received`);\n  }\n}\n\nconsole.log(`\\nüîç === END OF URL TEST ===`);\nreturn items;"
      },
      "id": "analyze-results",
      "name": "Analyze URL Test Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        200
      ]
    }
  ],
  "connections": {
    "Schedule Test (Every 30s)": {
      "main": [
        [
          {
            "node": "Query Notion (Test)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Notion (Test)": {
      "main": [
        [
          {
            "node": "Extract Test URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Test URLs": {
      "main": [
        [
          {
            "node": "Test URL Access (HEAD)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test URL Access (HEAD)": {
      "main": [
        [
          {
            "node": "Analyze URL Test Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "url-test-1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "notion-url-test"
  },
  "id": "postflow-notion-url-test",
  "tags": []
}
